#!/bin/bash

# Script so s√°nh hi·ªáu su·∫•t gi·ªØa implementation c≈© v√† m·ªõi
# C·∫ßn c√≥ 2 version kh√°c nhau c·ªßa API ƒë·ªÉ so s√°nh

echo "=== SO S√ÅNH HI·ªÜU SU·∫§T NEARBY SEARCH ==="
echo ""

# C·∫•u h√¨nh
BASE_URL="http://localhost:8080"
LAT="10.762622"
LON="106.660172"
ITERATIONS=10

echo "üìç T·ªça ƒë·ªô test: $LAT, $LON"
echo "üîÑ S·ªë l·∫ßn test: $ITERATIONS"
echo ""

# Function ƒë·ªÉ ƒëo th·ªùi gian API
measure_api_time() {
    local url="$1"
    local description="$2"
    
    echo "üîç Testing: $description"
    echo "URL: $url"
    
    total_time=0
    success_count=0
    error_count=0
    
    for i in $(seq 1 $ITERATIONS); do
        start_time=$(date +%s%3N)
        
        response=$(curl -s -X GET "$url" \
          -H "Content-Type: application/json" \
          -w "\n%{http_code}")
        
        end_time=$(date +%s%3N)
        duration=$((end_time - start_time))
        
        # T√°ch response body v√† status code
        http_code=$(echo "$response" | tail -n1)
        response_body=$(echo "$response" | head -n -1)
        
        if [ "$http_code" = "200" ]; then
            success_count=$((success_count + 1))
            total_time=$((total_time + duration))
            
            # L·∫•y s·ªë s·∫£n ph·∫©m t√¨m th·∫•y
            count=$(echo "$response_body" | jq -r '.data.content | length // 0')
            echo "  L·∫ßn $i: ${duration}ms (${count} s·∫£n ph·∫©m)"
        else
            error_count=$((error_count + 1))
            echo "  L·∫ßn $i: ERROR (HTTP $http_code)"
        fi
        
        sleep 0.5
    done
    
    if [ $success_count -gt 0 ]; then
        avg_time=$((total_time / success_count))
        echo "  ‚úÖ Th√†nh c√¥ng: $success_count/$ITERATIONS"
        echo "  ‚è±Ô∏è  Th·ªùi gian trung b√¨nh: ${avg_time}ms"
    else
        echo "  ‚ùå T·∫•t c·∫£ ƒë·ªÅu l·ªói"
    fi
    
    if [ $error_count -gt 0 ]; then
        echo "  ‚ö†Ô∏è  L·ªói: $error_count/$ITERATIONS"
    fi
    
    echo ""
    echo "---"
    echo ""
}

# Test 1: Native Query Implementation (m·ªõi)
echo "üöÄ TEST 1: Native Query Implementation (M·ªöI)"
measure_api_time "$BASE_URL/products/nearby?lat=$LAT&lon=$LON&page=0&size=20" "Native Query - 20 s·∫£n ph·∫©m"

# Test 2: Test v·ªõi k√≠ch th∆∞·ªõc kh√°c nhau
echo "üöÄ TEST 2: Test v·ªõi k√≠ch th∆∞·ªõc kh√°c nhau"
measure_api_time "$BASE_URL/products/nearby?lat=$LAT&lon=$LON&page=0&size=5" "Native Query - 5 s·∫£n ph·∫©m"
measure_api_time "$BASE_URL/products/nearby?lat=$LAT&lon=$LON&page=0&size=50" "Native Query - 50 s·∫£n ph·∫©m"

# Test 3: Test v·ªõi t·ªça ƒë·ªô kh√°c nhau
echo "üöÄ TEST 3: Test v·ªõi t·ªça ƒë·ªô kh√°c nhau"

# H·ªì Ch√≠ Minh
measure_api_time "$BASE_URL/products/nearby?lat=10.762622&lon=106.660172&page=0&size=10" "H·ªì Ch√≠ Minh"

# H√† N·ªôi
measure_api_time "$BASE_URL/products/nearby?lat=21.0285&lon=105.8542&page=0&size=10" "H√† N·ªôi"

# ƒê√† N·∫µng
measure_api_time "$BASE_URL/products/nearby?lat=16.0544&lon=108.2022&page=0&size=10" "ƒê√† N·∫µng"

# Test 4: Test ph√¢n trang
echo "üöÄ TEST 4: Test ph√¢n trang"
measure_api_time "$BASE_URL/products/nearby?lat=$LAT&lon=$LON&page=0&size=10" "Trang 0"
measure_api_time "$BASE_URL/products/nearby?lat=$LAT&lon=$LON&page=1&size=10" "Trang 1"
measure_api_time "$BASE_URL/products/nearby?lat=$LAT&lon=$LON&page=2&size=10" "Trang 2"

# Test 5: Ki·ªÉm tra t√≠nh ch√≠nh x√°c c·ªßa s·∫Øp x·∫øp
echo "üöÄ TEST 5: Ki·ªÉm tra t√≠nh ch√≠nh x√°c c·ªßa s·∫Øp x·∫øp"
echo "L·∫•y 20 s·∫£n ph·∫©m v√† ki·ªÉm tra distanceKm c√≥ tƒÉng d·∫ßn kh√¥ng..."

response=$(curl -s -X GET "$BASE_URL/products/nearby?lat=$LAT&lon=$LON&page=0&size=20" \
  -H "Content-Type: application/json")

if echo "$response" | jq -e '.success' > /dev/null; then
    echo "Kho·∫£ng c√°ch c√°c s·∫£n ph·∫©m (km):"
    distances=$(echo "$response" | jq -r '.data.content[] | .distanceKm // "null"')
    
    prev_distance=""
    is_sorted=true
    
    for distance in $distances; do
        if [ "$distance" != "null" ]; then
            echo "  $distance km"
            if [ -n "$prev_distance" ] && (( $(echo "$distance < $prev_distance" | bc -l) )); then
                is_sorted=false
            fi
            prev_distance="$distance"
        fi
    done
    
    if [ "$is_sorted" = true ]; then
        echo "‚úÖ S·∫Øp x·∫øp ƒë√∫ng: kho·∫£ng c√°ch tƒÉng d·∫ßn"
    else
        echo "‚ùå S·∫Øp x·∫øp sai: kho·∫£ng c√°ch kh√¥ng tƒÉng d·∫ßn"
    fi
else
    echo "‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra s·∫Øp x·∫øp"
fi

echo ""
echo "=== K·∫æT TH√öC SO S√ÅNH ==="
